# -*- coding: utf-8 -*-
"""ML_hw6_q3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y5Gpru8At2e0aoyLNv5LrNVpy2RRLvB9
"""

import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import pandas as pd

url_votes = 'https://raw.githubusercontent.com/exemplary-citizen/PCA-and-Senate-Voting-Data/master/senator_pca_problem/senator_data_pca/'
senator_df =  pd.read_csv(url_votes + 'data_matrix.csv',error_bad_lines=False)
af = pd.read_csv(url_votes + 'politician_labels.txt', header=None)
af["affiliations"] = af[0].str.split().str[-1]

X = np.array(senator_df.values[:, 3:].T, dtype='float64')

affiliations = af["affiliations"]
print(affiliations)
aff_list = list(affiliations)

from sklearn import preprocessing
le = preprocessing.LabelEncoder()
le.fit(affiliations)
print(le.classes_)
cat = le.transform(affiliations)

from sklearn.cluster import KMeans
kmeans = KMeans(n_clusters=2).fit(X)
labels = kmeans.predict(X)

errors = []
for i in range(0,100):
  if cat[i]!=labels[i]:
    errors.append(i)
print(errors)

"""Senators that were misclassified"""

error_list = []
for i in errors:
  error_list.append(af[0][i])
print(error_list)

"""> These senators were misclassified because kmeans forms cirular clusters and the data points of these senators were not within this circular cluster boundary. That is K means is quite sensitive to outliers.

The results can be visualized by plotting data in a space of reduced dimensions
"""

X_mean = np.mean(X, axis = 0)
X_original = X.copy()
X = X - np.mean(X, axis = 0)

from sklearn.decomposition import PCA
pca = PCA(n_components=2)
projected = pca.fit_transform(X)

from sklearn.cluster import KMeans
kmeans = KMeans(2)
labels = kmeans.fit(projected).predict(projected)
plt.scatter(projected[:, 0], projected[:, 1], c=affiliations, s=40, cmap='viridis');
ax = plt.gca()
ax.axis('equal')
plt.show();

"""Misclassified senators"""

repub = np.where(affiliations=='Red')
repub = np.squeeze(repub)
sen_id = np.where(projected[repub,0] >= 0)
print(af[0][repub[sen_id]])

repub = np.where(affiliations=='Blue')
repub = np.squeeze(repub)
sen_id = np.where(projected[repub,0] <= 0)
print(af[0][repub[sen_id]])

repub = np.where(affiliations=='Yellow')
repub = np.squeeze(repub)
print(af[0][repub])

